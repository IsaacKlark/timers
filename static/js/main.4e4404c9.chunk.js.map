{"version":3,"sources":["images/play_circle_outline-24px.svg","images/pause_circle_outline-24px.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","track","setTrack","id","setId","enteredText","setEnteredText","createTrack","code","date","Date","emptyEnter","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","name","hours","minutes","seconds","start","document","querySelector","value","i","clearTimeout","setTimeout","newTrack","map","time","className","type","placeholder","onKeyDown","e","keyCode","onChange","target","onClick","key","changedTrack","style","background","playImage","pauseImage","playPause","filteredTracks","filter","cleartrack","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4e4404c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play_circle_outline-24px.be88024f.svg\";","module.exports = __webpack_public_path__ + \"static/media/pause_circle_outline-24px.1560dca6.svg\";","import React, { useState } from 'react';\nimport './App.css';\nimport playImage from '../src/images/play_circle_outline-24px.svg';\nimport pauseImage from '../src/images/pause_circle_outline-24px.svg';\n\n\nfunction App() {\n  const [track, setTrack] = useState([]);\n  let [id, setId] = useState(0);\n  let [enteredText, setEnteredText] = useState(\"\");\n  \n  const createTrack = (code) => {\n    if (code === 13) {\n      const date = new Date;\n      const emptyEnter = `${date.getDate()} ${date.getMonth()} \n        ${date.getFullYear()} \n        ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`\n      setTrack([...track, {\n        name: enteredText === \"\" ? emptyEnter : enteredText,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n        start: true,\n        id: id\n      }]);\n      setId(id + 1);\n      document.querySelector('.input-text').value = \"\";\n      setEnteredText(\"\");\n    }\n  }\n\n  for (var i = 1; i < 1000; i++) {\n    clearTimeout(i);\n  }\n\n  setTimeout(() => {\n    if (track[0]) {\n      const newTrack = track.map(time => {\n        let hours = time.hours;\n        let minutes = time.minutes;\n        let seconds = time.seconds;\n\n        if (time.start === true) {\n          if (time.seconds < 59) {\n            seconds = time.seconds + 1;\n          } else if (time.minutes < 59) {\n            minutes = time.minutes + 1;\n            seconds = 0;\n          } else {\n            hours = time.hours++;\n            minutes = 0;\n            seconds = 0;\n          }\n        }\n        return ({\n          name: time.name,\n          hours,\n          minutes,\n          seconds,\n          start: time.start,\n          id: time.id\n        })\n      });\n\n      setTrack(newTrack);\n    }\n  }, 1000);\n\n  const cleartrack = (id) => {\n    const filteredTracks = track.filter(newTrack => newTrack.id !== id);\n    setTrack(filteredTracks);\n  }\n\n  const playPause = (id, e) => {\n    const newTrack = track.map(changedTrack => {\n      if (changedTrack.id !== id) {\n        return changedTrack;\n      } else {\n        if (changedTrack.start) {\n          e.target.style.background = `url(${playImage})`;\n        } else {\n          e.target.style.background = `url(${pauseImage})`;\n        }\n\n        return ({ ...changedTrack, start: !changedTrack.start })\n      }\n    });\n    setTrack(newTrack);\n  }\n    \n\n  return (\n    <>\n      <h1 className=\"tracker\">tracker</h1>\n      <span className=\"enterFild\">\n        <input\n          type=\"text\"\n          name=\"text\"\n          placeholder=\"Enter tracker name\"\n          className=\"input-text\"\n          onKeyDown={(e) => createTrack(e.keyCode)}\n          onChange={(e) => {\n            setEnteredText(e.target.value);\n          }}\n        />\n        <button\n          type=\"button\"\n          className=\"input-button\"\n          onClick={() => createTrack(13)}\n        >\n        </button>\n      </span>\n      {track.map(newTrack => {\n        return (\n          <div \n            className=\"createdTrack\" \n            key={newTrack.id}\n          >\n            {newTrack.name}\n            <div className=\"rightBlock\">\n              <div className=\"time\">\n                <span>\n                  {\n                    newTrack.hours < 10 ? `0${newTrack.hours}: ` : `${newTrack.hours}: `\n                  }\n                </span>\n                <span>\n                  {\n                    newTrack.minutes < 10 ? `0${newTrack.minutes}: ` : `${newTrack.minutes}: `\n                  }\n                </span>\n                <span>\n                  {\n                    newTrack.seconds < 10 ? `0${newTrack.seconds}` : `${newTrack.seconds}`\n                  }\n                </span>\n              </div>\n              <button\n                type=\"button\"\n                className=\"playPause\"\n                onClick={(e) => playPause(newTrack.id, e)}\n              >\n              </button>\n              <button\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => cleartrack(newTrack.id)}\n              >\n              </button>\n            </div>\n          </div>\n        )\n      })}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}